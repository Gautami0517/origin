<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<ProxyEndpoint name="Acme-Bank-PaymentsProxyEndpoint">
   <Description>Acme Bank Payments</Description>
   <FaultRules>
      <FaultRule name="SecurityFaultHandling">
         <Step>
            <Name>SF-SecurityFaultCallout</Name>
         </Step>
         <Condition>((oauthV2.VerifyAccessToken.failed equals true) or ((oauthV2.VerifyAPIKey.failed equals true) or (BasicAuthentication.DecodeBasicAuthentication.failed equals true) or (acl.AccessControl.failed equals true) or (oauthV2.failed equals true) or (authFlag equals false) or (isValidToken equals false)))</Condition>
      </FaultRule>
      <FaultRule name="ThreatFaultHandling">
         <Step>
            <Name>SF-ThreatFault</Name>
         </Step>
         <Condition>((jsonattack.cf-JSONThreatProtection.DoSAEvaluation.failed equals true) or (threatProtectionEvaluationStatus == "failed"))</Condition>
      </FaultRule>
   </FaultRules>
   <DefaultFaultRule name="All">
      <AlwaysEnforce>true</AlwaysEnforce>
      <Step>
         <Name>SF-DefaultFaultCallout</Name>
      </Step>
      <AlwaysEnforce>true</AlwaysEnforce>
   </DefaultFaultRule>
   <PreFlow name="PreFlow">
      <Request>
         <Step>
            <Name>cf-set-log-variables</Name>
         </Step>
         <Step>
            <Name>SF-Proxy-Current-Flow-Name</Name>
         </Step>
         <Step>
            <Name>SF-Log-Preflow-Request</Name>
         </Step>
         <Step>
            <Condition>(log.proxyVerb != "OPTIONS")</Condition>
            <Name>SF-ThreatProtection</Name>
         </Step>
      </Request>
      <Response>
      </Response>
   </PreFlow>
   <Flows>
      <Flow name="WrongAccept">
         <Description/>
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Fault-Unsupported-AcceptType</Name>
            </Step>
         </Request>
         <Response/>
         <Condition>(log.proxyVerb != "OPTIONS") and (!(log.Accept JavaRegex "(text\/xml)(;.*)|(.*;)(text\/xml)(;.*)|text\/xml|(.*;)(text\/xml)|(application\/xml)(;.*)|(.*;)(application\/xml)(;.*)|application\/xml|(.*;)(application\/xml)|(application\/json)(;.*)|(.*;)(application\/json)(;.*)|application\/json|(.*;)(application\/json)"))</Condition>
      </Flow>
      <Flow name="WrongContentType">
         <Description/>
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Fault-Unsupported-ContentType</Name>
            </Step>
         </Request>
         <Response/>
         <Condition>(log.proxyVerb != "OPTIONS") and ((!(request.content = "")) and (!(request.content is null)) and !(log.Content-Type JavaRegex "(text\/xml)(;.*)|(.*;)(text\/xml)(;.*)|text\/xml|(.*;)(text\/xml)|(application\/xml)(;.*)|(.*;)(application\/xml)(;.*)|application\/xml|(.*;)(application\/xml)|(application\/json)(;.*)|(.*;)(application\/json)(;.*)|application\/json|(.*;)(application\/json)"))</Condition>
      </Flow>
      <Flow name="CreateDomesticPaymentConsents">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-CreateDomesticPaymentConsents</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/domestic-payment-consents&quot;) and (request.verb= &quot;POST&quot;)</Condition>
      </Flow>
      <Flow name="GetDomesticPaymentConsentsConsentId">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-GetDomesticPaymentConsentsConsentId</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/domestic-payment-consents/{ConsentId}&quot;) and (request.verb= &quot;GET&quot;)</Condition>
      </Flow>
      <Flow name="GetDomesticPaymentConsentsConsentIdFundsConfirmation">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-GetDomesticPaymentConsentsConsentIdFundsConfirmation</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/domestic-payment-consents/{ConsentId}/funds-confirmation&quot;) and (request.verb= &quot;GET&quot;)</Condition>
      </Flow>
      <Flow name="CreateDomesticPayments">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-CreateDomesticPayments</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/domestic-payments&quot;) and (request.verb= &quot;POST&quot;)</Condition>
      </Flow>
      <Flow name="GetDomesticPaymentsDomesticPaymentId">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-GetDomesticPaymentsDomesticPaymentId</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/domestic-payments/{DomesticPaymentId}&quot;) and (request.verb= &quot;GET&quot;)</Condition>
      </Flow>
      <Flow name="CreateInternationalPaymentConsents">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-CreateInternationalPaymentConsents</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/international-payment-consents&quot;) and (request.verb= &quot;POST&quot;)</Condition>
      </Flow>
      <Flow name="GetInternationalPaymentConsentsConsentId">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-GetInternationalPaymentConsentsConsentId</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/international-payment-consents/{ConsentId}&quot;) and (request.verb= &quot;GET&quot;)</Condition>
      </Flow>
      <Flow name="GetInternationalPaymentConsentsConsentIdFundsConfirmation">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-GetInternationalPaymentConsentsConsentIdFundsConfirmation</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/international-payment-consents/{ConsentId}/funds-confirmation&quot;) and (request.verb= &quot;GET&quot;)</Condition>
      </Flow>
      <Flow name="CreateInternationalPayments">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-CreateInternationalPayments</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/international-payments&quot;) and (request.verb= &quot;POST&quot;)</Condition>
      </Flow>
      <Flow name="GetInternationalPaymentsInternationalPaymentId">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Assign-Routing-Variables-GetInternationalPaymentsInternationalPaymentId</Name>
            </Step>
         </Request>
         <Response>
         </Response>
         <Condition>(proxy.pathsuffix MatchesPath &quot;/international-payments/{InternationalPaymentId}&quot;) and (request.verb= &quot;GET&quot;)</Condition>
      </Flow>
      <!-- CORS Preflight flow-->
      <Flow name="CORS">
         <Description/>
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-getCORSDomainList</Name>
            </Step>
         </Request>
         <Response>
            <Step>
               <Name>cf-CORSValidation</Name>
            </Step>
         </Response>
         <Condition>(log.proxyVerb == "OPTIONS") and (log.origin != null)</Condition>
      </Flow>
      <Flow name="unknown-resource">
         <Request>
            <Step>
               <Name>SF-Proxy-Current-Flow-Name</Name>
            </Step>
            <Step>
               <Name>cf-Unknown-Resource</Name>
            </Step>
         </Request>
         <Response/>
      </Flow>
   </Flows>
   <PostFlow name="PostFlow">
      <Request></Request>
      <Response>
         <Step>
            <Name>SF-Log-Collector</Name>
         </Step>
      </Response>
   </PostFlow>
   <PostClientFlow>
        <Request/>
        <Response>
        </Response>
    </PostClientFlow>
   <HTTPProxyConnection>
      <BasePath>/v1/acmebank/payments</BasePath>
      <VirtualHost>default</VirtualHost>
      <VirtualHost>secure</VirtualHost>
   </HTTPProxyConnection>
   <RouteRule name="NoRoute">
      <Condition>(request.verb == "OPTIONS")</Condition>
   </RouteRule>
   <RouteRule name="Acme-Bank-Payments">
      <Condition>(target.route.service = &quot;Acme-Bank-Payments&quot;)</Condition>
      <TargetEndpoint>Acme-Bank-Payments</TargetEndpoint>
   </RouteRule>
</ProxyEndpoint>
